/********************
* CS36 Lab 5
* Owen Bailey-Waltz
* 1158982
*********************/

#include <stdio.h>
#include <string.h>
#define SIZE 32

void minimum(int[], int, int*, int*); // ARRAYS 1
void flip_min_max(int[], int); // ARRAYS 2
int comp_max(int[], int[], int, int); // ARRAYS 3
int insert(int[], int, int, int); // ARRAYS 4
int delete(int[], int, int); // ARRAYS 5
int sdelete(int[], int, int); // ARRAYS 6
int smerge(int[], int[], int[], int, int); // ARRAYS 7
int sentence_chars(char*); // STRINGS 1
int sentence_words(char*); // STRINGS 2
void multiline(char*, int*, int*, int*); // STRINGS 3
int find_pattern(char*, char*); // STRINGS 4

int main()
{
    int arr[SIZE], arr2[SIZE], arr3[SIZE];
    char str1[SIZE], str2[SIZE], str3[SIZE], str4[SIZE], pattern[SIZE];
    int i, n, n2, min, index, comp;
    int val, ind;
    int char_count, word_count, line_count, pattern_count;

    // input for array section
    printf("Enter the number of elements : ");
    scanf("%d", &n);
    printf("Enter the elements : ");
    for (i = 0 ; i < n ; i++)
        scanf("%d", &arr[i]);
    
    minimum(arr, n, &min, &index);
    printf("The smallest element is : %d\n", min);
    printf("The position is : %d\n\n", index);

    flip_min_max(arr, n);

    // CLEAN UP THE ARRAY IN USE!
    for (i = 0 ; i < n ; i++)
        arr[i] = 0;
    
    // SCAN IN A NEW ARRAY!
    printf("ARRAY 1\n");
    printf("Enter the number of elements : ");
    scanf("%d", &n);
    printf("Enter the elements : ");
    for (i = 0 ; i < n ; i++)
        scanf("%d", &arr[i]);

    printf("ARRAY 2\n");
    printf("Enter the number of elements : ");
    scanf("%d", &n2);
    printf("Enter the elements : ");
    for (i = 0 ; i < n2 ; i++)
        scanf("%d", &arr2[i]);

    comp = comp_max(arr, arr2, n, n2);
    if (comp == 0)
        printf("Maximums of array 1 and array 2 are equal\n");
    else
        if (comp == -1)
            printf("The maximum of array 1 is less than than array 2\n");
        else
            printf("The maximum of array 1 is greater than array 2\n");
    printf("\n");
    
    printf("ARRAY 1: Enter a number to insert : ");
    scanf("%d", &val);
    printf("Enter an index : ");
    scanf("%d", &ind);
    if (insert(arr, val, ind, n) != 0)
        printf("lab5: insert FAILED!\n");
    else
        n++;
    
    printf("The new array : ");
    for (i = 0 ; i < n ; i++)
        printf("%d ", arr[i]);
    printf("\n");
    
    printf("ARRAY 2: Enter an index to delete an element from : ");
    scanf("%d", &ind);
    if (delete(arr2, ind, n2) != 0)
        printf("lab5: delete FAILED!\n");
    else
        n2--;
    
    printf("The new array : ");
    for (i = 0 ; i < n2 ; i++)
        printf("%d ", arr2[i]);
    printf("\n");

    // clear arrays... AGAIN
    for (i = 0 ; i < n ; i++)
        arr[i] = 0;
    for (i = 0 ; i < n2 ; i++)
        arr2[i] = 0;

    // sorted array problems
    printf("SORTED DELETE\n");
    printf("Enter the number of elements : ");
    scanf("%d", &n);
    printf("Enter the elements (in ascending order) : ");
    for (i = 0 ; i < n ; i++)
        scanf("%d", &arr[i]);
    printf("Enter a number to delete : ");
    scanf("%d", &val);
    if (sdelete(arr, val, n) != 0)
        printf("lab5: sorted delete FAILED!\n");
    else
    {
        n--;
        printf("The array after deletion is : ");
        for (i = 0 ; i < n ; i++)
            printf("%d ", arr[i]);
        printf("\n\n");
    }

    // CLEAR ARR1 ONE LAST TIME
    for (i = 0 ; i < n ; i++)
        arr[i] = 0;
    printf("SORTED MERGE\n");
    printf("Array 1\n");
    printf("Enter the number of elements : ");
    scanf("%d", &n);
    printf("Enter the elements (in ascending order) : ");
    for (i = 0 ; i < n ; i++)
        scanf("%d", &arr[i]);
    printf("Array 2\n");
    printf("Enter the number of elements : ");
    scanf("%d", &n2);
    printf("Enter the elements (in ascending order) : ");
    for (i = 0 ; i < n2 ; i++)
        scanf("%d", &arr2[i]);
    if (smerge(arr, arr2, arr3, n, n2) != 0)
        printf("lab5: sorted merge FAILED!\n");
    else
    {
        printf("Array 1 :\n");
        for (i = 0 ; i < n ; i++)
            printf("%d ", arr[i]);
        printf("\n");
        printf("Array 2 :\n");
        for (i = 0 ; i < n2 ; i++)
            printf("%d ", arr2[i]);
        printf("\n");
        printf("Merged array after sorting :\n");
        for (i = 0 ; i < (n + n2) ; i++)
            printf("%d ", arr3[i]);
        printf("\n\n");
    }

    printf("STRINGS\n");
    printf("CHARACTER COUNTER\n");
    char_count = sentence_chars(str1);
    printf("The text is: %s\n", str1);
    printf("The count of characters is %d\n\n", char_count);

    printf("WORD COUNTER\n");
    word_count = sentence_words(str2);
    printf("Total words : %d\n\n", word_count);

    printf("EVERYTHING COUNTER\n");
    char_count = 0;
    word_count = 0;
    multiline(str3, &word_count, &line_count, &char_count);
    printf("The total word count: %d\n", word_count);
    printf("The line count: %d\n", line_count);
    printf("The characters count: %d\n\n", char_count);

    /* printf("PATTERN FINDER\n");
    printf("Enter string: ");
    gets(str4);
    printf("Enter the pattern: ");
    getchar();
    gets(pattern);
    pattern_count = find_pattern(str4, pattern);
    printf("Pattern found %d times\n", pattern_count); */

    return 0;
}

/* ARRAYS: PROBLEM 1
 * This function will find the index of
 * the smallest number in an array, as well as
 * the value. */
void minimum(int arr[], int n, int* min, int* index)
{
    *min = arr[0];
    *index = 0;
    for (int i = 1 ; i < n ; i++)
        if (arr[i] < *min)
        {
            *index = i;
            *min = *(&arr[i]);
        }
}

/* ARRAYS: PROBLEM 2
 * This function will flip the minimum and
 * maximum values of the given array. */
void flip_min_max(int arr[], int n)
{
    int max, min, i_max = 0, i_min = 0;
    int t;
    int i;
    max = arr[0];
    min = arr[0];
    for (i = 1 ; i < n ; i++)
    {
        if (arr[i] > max)
        {
            max = arr[i];
            i_max = i;
        }
        if (arr[i] < min)
        {
            min = arr[i];
            i_min = i;
        }
    }
    t = arr[i_max];
    arr[i_max] = arr[i_min];
    arr[i_min] = t;

    printf("The smallest element : %d\n", min);
    printf("The position : %d\n", i_min);
    printf("The largest element : %d\n", max);
    printf("The position : %d\n", i_max);
    printf("The new array is : \n");
    for (i = 0 ; i < n ; i++)
        printf("%d ", arr[i]);
    printf("\n\n");
}

/* ARRAYS: PROBLEM 3
 * This function will compare the maximums
 * of two arrays, and will return:
 * 1: if max1 > max2
 * 0: if max1 == max2
 * -1: if max1 < max2 */
int comp_max(int arr1[], int arr2[], int size1, int size2)
{
    int max1, max2, i_max1 = 0, i_max2 = 0;
    int i;
    max1 = arr1[0];
    max2 = arr2[0];

    for (i = 1 ; i < size1 ; i++)
        if (arr1[i] > max1)
        {
            max1 = arr1[i];
            i_max1 = i;
        }
    
    for (i = 1 ; i < size2 ; i++)
        if (arr2[i] > max2)
        {
            max2 = arr2[i];
            i_max2 = i;
        }
    
    printf("ARRAY 1\n");
    printf("maximum : %d\n", max1);
    printf("index : %d\n\n", i_max1);
    printf("ARRAY 2\n");
    printf("maximum : %d\n", max2);
    printf("index : %d\n\n", i_max2);

    if (max1 > max2)
        return 1;
    else
        if (max1 == max2)
            return 0;
        else
            return -1;
}

/* ARRAYS: PROBLEM 4
 * This function will insert a given value
 * at a given array index and check for
 * success. */
int insert(int arr[], int val, int ind, int n)
{
    for (int i = n ; i >= ind ; i--)
        arr[i + 1] = arr[i];
    arr[ind] = val;

    // error checking -- will return -1 if garbage
    if (arr[ind] != val)
        return -1;
    else
        return 0;
}

/* ARRAYS: PROBLEM 5
 * This function will delete a given value
 * at a given array index and check for
 * success. */
int delete(int arr[], int ind, int n)
{
    for (int i = ind ; i < (n - 1) ; i++)
        arr[i] = arr[i + 1];
    arr[n-1] = 0;
    // error checking -- will return -1 if garbage
    if (arr[n] != 0)
        return -1;
    else
        return 0;
}

/* ARRAYS: PROBLEM 6
 * This function will delete a given value
 * from an array already sorted in ascending
 * order. */
int sdelete(int arr[], int val, int n)
{
    int i, j, found = 0;
    for (i = 0 ; (i < (n-1)); i++)
        if (arr[i] > arr[i+1])
        {
            printf("lab5: array not sorted\n");
            return -1;
        }

    for (i = 0 ; i < n ; i++)
        if (arr[i] == val)
        {
            found = 1;
            for (j = i; j < n - 1; j++)
                arr[j] = arr[j + 1];
        }
    if (found)
    {
        arr[n-1] = 0;
        return 0;
    }
    else
    {
        printf("lab5: value not found\n");
        return 1;
    }
}

/* ARRAYS: PROBLEM 7
 * This function will merge two sorted arrays
 * and then sort the result. */
int smerge(int arr1[], int arr2[], int result[], int size1, int size2)
{
    int i, j, t;
    for (i = 0 ; (i < (size1 - 1)); i++)
        if (arr1[i] > arr1[i+1])
        {
            printf("lab5: array 1 not sorted\n");
            return 1;
        }
    for (i = 0 ; (i < (size2 - 1)); i++)
        if (arr2[i] > arr2[i+1])
        {
            printf("lab5: array 2 not sorted\n");
            return 2;
        }
    
    i = 0;
    for (j = 0 ; j < size1 ; j++)
    {
        result[i] = arr1[j];
        i++;
    }
    for (j = 0 ; j < size2 ; j++)
    {
        result[i] = arr2[j];
        i++;
    }

    if (result[(size1 + size2) - 1] != arr2[size2 - 1])
    {
        printf("lab5: array size out of bounds\n");
        return -1;
    }

    for (i = 0 ; i < ((size1 + size2) - 1) ; i++)
        for (j = 0 ; j < ((size1 + size2) - 1) ; j++)
            if (result[j] > result[j+1])
            {
                t = result[j];
                result[j] = result[j+1];
                result[j+1] = t;
            }
    
    return 0;
}

int sentence_chars(char* input)
{
    int count = 0;
    printf("Enter * to end\n");
    printf("Enter text : ");
    char ch = getchar();
    while (ch != '*')
    {
        input[count] = ch;
        count++;
        ch = getchar();
    }
    input[count] = '\0';
    getchar();
    return count;
}

int sentence_words(char* input)
{
    int i = 0, count = 1;
    printf("Enter the sentence : ");
    char ch = getchar();
    while (ch != '\n')
    {
        input[i] = ch;
        if (ch == ' ')
            count++;
        i++;
        ch = getchar();
    }
    input[i] = '\0';
    getchar();
    return count;
}

void multiline(char* input, int* words, int* lines, int* chars)
{
    int i = 0;
    *words = 1;
    *lines = 1;
    *chars = 0;
    printf("Enter the text: ");
    char ch = getchar();
    while (ch != '*')
    {
        if (ch == ' ')
            (*words)++;
        if (ch == '\n')
            (*lines)++;
        input[i] = ch;
        i++;
        ch = getchar();
    }
    *chars = i;
    input[i] = '\0';
}

/* int find_pattern(char* input, char* pattern)
{
    int i, j, count = 0, bad = 0;
    for (i = 0 ; input[i] != '\0' ; i++)
    {
        bad = 0;
        if (input[i] == pattern[0])
            for (j = 1 ; (pattern[j] != '\0') && !bad; j++)
            {
                i++;
                if (input[i] != pattern[j])
                    bad = 1;
            }
        if (!bad)
            count++;
    }

    return count;
} */

/* OUTPUTS
Enter the number of elements : 5
Enter the elements : 1 2 3 4 5
The smallest element is : 1
The position is : 0

The smallest element : 1
The position : 0
The largest element : 5
The position : 4
The new array is : 
5 2 3 4 1 

ARRAY 1
Enter the number of elements : 5
Enter the elements : 1 2 3 4 5
ARRAY 2
Enter the number of elements : 6
Enter the elements : 1 2 3 4 5 6
ARRAY 1
maximum : 5
index : 4

ARRAY 2
maximum : 6
index : 5

The maximum of array 1 is less than than array 2

ARRAY 1: Enter a number to insert : 3
Enter an index : 3
The new array : 1 2 3 3 4 5 
ARRAY 2: Enter an index to delete an element from : 5
lab5: delete FAILED!
The new array : 1 2 3 4 5 0 
SORTED DELETE
Enter the number of elements : 5    
Enter the elements (in ascending order) : 1 2 3 4 5
Enter a number to delete : 4
The array after deletion is : 1 2 3 5 

SORTED MERGE
Array 1
Enter the number of elements : 5
Enter the elements (in ascending order) : 20 30 40 50 60
Array 2
Enter the number of elements : 7
Enter the elements (in ascending order) : 15 22 31 45 56 62 78
Array 1 :
20 30 40 50 60 
Array 2 :
15 22 31 45 56 62 78 
Merged array after sorting :
15 20 22 30 31 40 45 50 56 60 62 78 

STRINGS
CHARACTER COUNTER
Enter * to end
Enter text : Hi there*
The text is: 
Hi there
The count of characters is 9

WORD COUNTER
Enter the sentence : How are you

Total words : 3

EVERYTHING COUNTER
Enter the text: Hi there
*
The total word count: 2
The line count: 2
The characters count: 9




Enter the number of elements : 8
Enter the elements : 1 2 3 4 5 6 7 8
The smallest element is : 1
The position is : 0

The smallest element : 1
The position : 0
The largest element : 8
The position : 7
The new array is : 
8 2 3 4 5 6 7 1 

ARRAY 1
Enter the number of elements : 2
Enter the elements : 48 88
ARRAY 2
Enter the number of elements : 4
Enter the elements : 1 2 3 4
ARRAY 1
maximum : 88
index : 1

ARRAY 2
maximum : 4
index : 3

The maximum of array 1 is greater than array 2

ARRAY 1: Enter a number to insert : 83
Enter an index : 1
The new array : 48 83 88 
ARRAY 2: Enter an index to delete an element from : 2
lab5: delete FAILED!
The new array : 1 2 4 0 
SORTED DELETE
Enter the number of elements : 3
Enter the elements (in ascending order) : 1 2 3
Enter a number to delete : 2
The array after deletion is : 1 3 

SORTED MERGE
Array 1
Enter the number of elements : 7
Enter the elements (in ascending order) : 1 2 3 4 5 6 7
Array 2
Enter the number of elements : 3
Enter the elements (in ascending order) : 2 4 6
Array 1 :
1 2 3 4 5 6 7 
Array 2 :
2 4 6 
Merged array after sorting :
1 2 2 3 4 4 5 6 6 7 

STRINGS
CHARACTER COUNTER
Enter * to end
Enter text : This is irritating*
The text is: 
This is irritating
The count of characters is 19

WORD COUNTER
Enter the sentence : I wish I were done with this

Total words : 7

EVERYTHING COUNTER
Enter the text: Geez*
The total word count: 1
The line count: 1
The characters count: 4



Enter the number of elements : 2
Enter the elements : 1 2
The smallest element is : 1
The position is : 0

The smallest element : 1
The position : 0
The largest element : 2
The position : 1
The new array is : 
2 1 

ARRAY 1
Enter the number of elements : 5 
Enter the elements : 1 2 3 4 5
ARRAY 2
Enter the number of elements : 8
Enter the elements : 93 1 3 4 1 4 5 9
ARRAY 1
maximum : 5
index : 4

ARRAY 2
maximum : 93
index : 0

The maximum of array 1 is less than than array 2

ARRAY 1: Enter a number to insert : 81
Enter an index : 4
The new array : 1 2 3 4 81 5 
ARRAY 2: Enter an index to delete an element from : 82
lab5: delete FAILED!
The new array : 93 1 3 4 1 4 5 0 
SORTED DELETE
Enter the number of elements : 8
Enter the elements (in ascending order) : 1 2 3 4 5 6 7 8
Enter a number to delete : 9
lab5: value not found
lab5: sorted delete FAILED!
SORTED MERGE
Array 1
Enter the number of elements : 8  
Enter the elements (in ascending order) : 1 2 3 4 5 6 7 8 
Array 2
Enter the number of elements : 2
Enter the elements (in ascending order) : 19 28
Array 1 :
1 2 3 4 5 6 7 8 
Array 2 :
19 28 
Merged array after sorting :
1 2 3 4 5 6 7 8 19 28 

STRINGS
CHARACTER COUNTER
Enter * to end
Enter text : Getting these test cases out* 
The text is: 
Getting these test cases out
The count of characters is 29

WORD COUNTER
Enter the sentence : cant be over 32 

Total words : 4

EVERYTHING COUNTER
Enter the text: blast! gotta go
*
The total word count: 3
The line count: 2
The characters count: 16



Enter the number of elements : 8
Enter the elements : 1 2 3 4 5 6 7 8
The smallest element is : 1
The position is : 0

The smallest element : 1
The position : 0
The largest element : 8
The position : 7
The new array is : 
8 2 3 4 5 6 7 1 

ARRAY 1
Enter the number of elements : 2
Enter the elements : 48 88
ARRAY 2
Enter the number of elements : 4
Enter the elements : 1 2 3 4
ARRAY 1
maximum : 88
index : 1

ARRAY 2
maximum : 4
index : 3

The maximum of array 1 is greater than array 2

ARRAY 1: Enter a number to insert : 83
Enter an index : 1
The new array : 48 83 88 
ARRAY 2: Enter an index to delete an element from : 2
lab5: delete FAILED!
The new array : 1 2 4 0 
SORTED DELETE
Enter the number of elements : 3
Enter the elements (in ascending order) : 1 2 3
Enter a number to delete : 2
The array after deletion is : 1 3 

SORTED MERGE
Array 1
Enter the number of elements : 7
Enter the elements (in ascending order) : 1 2 3 4 5 6 7
Array 2
Enter the number of elements : 3
Enter the elements (in ascending order) : 2 4 6
Array 1 :
1 2 3 4 5 6 7 
Array 2 :
2 4 6 
Merged array after sorting :
1 2 2 3 4 4 5 6 6 7 

STRINGS
CHARACTER COUNTER
Enter * to end
Enter text : This is irritating*
The text is: 
This is irritating
The count of characters is 19

WORD COUNTER
Enter the sentence : I wish I were done with this

Total words : 7

EVERYTHING COUNTER
Enter the text: Geez*
The total word count: 1
The line count: 1
The characters count: 4

owen.baileywaltz@Owens-MacBook-Pro lab5 % ./a.out
Enter the number of elements : 9
Enter the elements : 1 2 3 4 5 6 7 8 9 
The smallest element is : 1
The position is : 0

The smallest element : 1
The position : 0
The largest element : 9
The position : 8
The new array is : 
9 2 3 4 5 6 7 8 1 

ARRAY 1
Enter the number of elements : 2 
Enter the elements : 945 2
ARRAY 2
Enter the number of elements : 83 99
Enter the elements : 12 19 ^C^X
owen.baileywaltz@Owens-MacBook-Pro lab5 % [A
zsh: bad pattern: [A
owen.baileywaltz@Owens-MacBook-Pro lab5 % ./a.out
Enter the number of elements : 2
Enter the elements : 1 2
The smallest element is : 1
The position is : 0

The smallest element : 1
The position : 0
The largest element : 2
The position : 1
The new array is : 
2 1 

ARRAY 1
Enter the number of elements : 5 
Enter the elements : 1 2 3 4 5
ARRAY 2
Enter the number of elements : 8
Enter the elements : 93 1 3 4 1 4 5 9
ARRAY 1
maximum : 5
index : 4

ARRAY 2
maximum : 93
index : 0

The maximum of array 1 is less than than array 2

ARRAY 1: Enter a number to insert : 81
Enter an index : 4
The new array : 1 2 3 4 81 5 
ARRAY 2: Enter an index to delete an element from : 82
lab5: delete FAILED!
The new array : 93 1 3 4 1 4 5 0 
SORTED DELETE
Enter the number of elements : 8
Enter the elements (in ascending order) : 1 2 3 4 5 6 7 8
Enter a number to delete : 9
lab5: value not found
lab5: sorted delete FAILED!
SORTED MERGE
Array 1
Enter the number of elements : 8  
Enter the elements (in ascending order) : 1 2 3 4 5 6 7 8 
Array 2
Enter the number of elements : 2
Enter the elements (in ascending order) : 19 28
Array 1 :
1 2 3 4 5 6 7 8 
Array 2 :
19 28 
Merged array after sorting :
1 2 3 4 5 6 7 8 19 28 

STRINGS
CHARACTER COUNTER
Enter * to end
Enter text : Getting these test cases out* 
The text is: 
Getting these test cases out
The count of characters is 29

WORD COUNTER
Enter the sentence : cant be over 32 

Total words : 4

EVERYTHING COUNTER
Enter the text: blast! gotta go
*
The total word count: 3
The line count: 2
The characters count: 16

owen.baileywaltz@Owens-MacBook-Pro lab5 % ./a.out
Enter the number of elements : 3
Enter the elements : 1 2 3
The smallest element is : 1
The position is : 0

The smallest element : 1
The position : 0
The largest element : 3
The position : 2
The new array is : 
3 2 1 

ARRAY 1
Enter the number of elements : 9 
Enter the elements : 1 2 3 4 5 6 7 8 9
ARRAY 2
Enter the number of elements : 4 
Enter the elements : 81 29 39 4
ARRAY 1
maximum : 9
index : 8

ARRAY 2
maximum : 81
index : 0

The maximum of array 1 is less than than array 2

ARRAY 1: Enter a number to insert : 7
Enter an index : 2
The new array : 1 2 7 3 4 5 6 7 8 9 
ARRAY 2: Enter an index to delete an element from : 3 
lab5: delete FAILED!
The new array : 81 29 39 0 
SORTED DELETE
Enter the number of elements : 8 
Enter the elements (in ascending order) : 1 2 3 4 5 6 7 8
Enter a number to delete : 2
The array after deletion is : 1 3 4 5 6 7 8 

SORTED MERGE
Array 1
Enter the number of elements : 9 
Enter the elements (in ascending order) : 1 2 3 4 5 6 7 8 9
Array 2
Enter the number of elements : 1
Enter the elements (in ascending order) : 2
Array 1 :
1 2 3 4 5 6 7 8 9 
Array 2 :
2 
Merged array after sorting :
1 2 2 3 4 5 6 7 8 9 

STRINGS
CHARACTER COUNTER
Enter * to end
Enter text : too little time*
The text is: 
too little time
The count of characters is 16

WORD COUNTER
Enter the sentence : urgh wat?

Total words : 2

EVERYTHING COUNTER
Enter the text: twentythreehundred 57
*
The total word count: 2
The line count: 2
The characters count: 22 */
